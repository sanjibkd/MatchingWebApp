# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Handles routing in js files
GET     /browserJavascriptRoutes     controllers.browser.BrowserController.javascriptRoutes()
GET     /debugJavascriptRoutes     controllers.debug.DebugController.javascriptRoutes()
GET     /projectJavascriptRoutes     controllers.project.ProjectController.javascriptRoutes()

# Home page
GET		/							controllers.project.ProjectController.index()
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

# Browser
GET /browser									controllers.browser.BrowserController.indexRefresh()
POST /browser						controllers.browser.BrowserController.postIndex()
GET	  /browser/:projectName/:tableName/:copy	controllers.browser.BrowserController.getIndex(projectName: String, tableName: String, copy: String)
GET	  /browser/:projectName/:tableName	controllers.browser.BrowserController.getIndexNoCopy(projectName: String, tableName: String)
POST /browserSample			controllers.browser.BrowserController.sample()
GET /browserOpenCopy						controllers.browser.BrowserController.openCopy()
GET /browserGetAllIds						controllers.browser.BrowserController.getAllIds()
POST /browserGetTuplesForIds				controllers.browser.BrowserController.getTuplesForIds()
POST /browserSaveTable						controllers.browser.BrowserController.saveTable()
POST /browserSaveCellEdit			controllers.browser.BrowserController.saveCellEdit()
GET /browserAllExplorerData				controllers.browser.BrowserController.getAllExplorerData()
GET /browserExplorerData				controllers.browser.BrowserController.getExplorerData(attrName: String)
POST /browserQuery						controllers.browser.BrowserController.getBrowserQueryResults()
POST /browserRemoveRows			controllers.browser.BrowserController.removeRows()
GET /browserRemoveColumn/:attrName			controllers.browser.BrowserController.removeColumn(attrName: String)
GET /browserGetSortedIds/:attrName			controllers.browser.BrowserController.getSortedIds(attrName: String)

# Debug
POST /debugOnFly				controllers.debug.DebugController.postIndexOnFly(projectName: String)
POST /debugOnFlyWithLabeledData				controllers.debug.DebugController.postIndexOnFlyWithLabeledData(projectName: String)
POST /debugUsingResults				controllers.debug.DebugController.postIndexUsingResults(projectName: String)
GET /debugCandsetView/:projectName/:candsetName				controllers.debug.DebugController.getIndexCandsetView(projectName: String, candsetName: String)
GET	  /debug/:projectName/:table1Name/:table2Name/:candsetName/:matcherName/:goldName	controllers.debug.DebugController.getIndex(projectName: String, table1Name: String, table2Name: String, candsetName: String, matcherName: String, goldName: String)
GET /debugGetAllIds						controllers.debug.DebugController.getAllIds()
GET /debugGetIdsByMatchingStatus		controllers.debug.DebugController.getIdsByMatchingStatus(status: String)
GET /debugGetIdsByErrorStatus			controllers.debug.DebugController.getIdsByErrorStatus(status: String)
GET /debugGetIdsByRuleName				controllers.debug.DebugController.getIdsByRuleName(ruleName: String)
POST /debugGetIdsBySkyline				controllers.debug.DebugController.getIdsBySkyline()
GET /debugGetAllRuleNames					controllers.debug.DebugController.getAllRuleNames()
GET /debugGetAllFeatureNames					controllers.debug.DebugController.getAllFeatureNames()
POST /debugGetTuplesForIds				controllers.debug.DebugController.getTuplesForIds()
GET /debugGetMatchingSummaryJson		controllers.debug.DebugController.getMatchingSummaryJson()
POST /debugQuery						controllers.debug.DebugController.getDebugQueryResults()
GET /debugGetOperationMode				controllers.debug.DebugController.getOperationMode()
GET /debugGetPrecisionErrorIdsByRuleName	controllers.debug.DebugController.getPrecisionErrorIdsByRuleName(ruleName: String)

# Project
POST    /createNewProject						controllers.project.ProjectController.createNewProject()
GET     /project/:projectName              		controllers.project.ProjectController.showProject(projectName)
GET     /projects                   			controllers.project.ProjectController.index()
GET     /attribs/:projectName/:tableName		controllers.project.ProjectController.getAttributes(projectName, tableName)
GET     /features/:projectName					controllers.project.ProjectController.getFeatureNames(projectName)
GET     /relops									controllers.project.ProjectController.getRelationalOperatorNames()
GET		/project/:projectName/save				controllers.project.ProjectController.saveProject(projectName)
GET		/project/:projectName/saveAndExit		controllers.project.ProjectController.saveAndExit(projectName)
GET		/project/:projectName/deleteProject		controllers.project.ProjectController.deleteProject(projectName)

# Set Defaults
POST	/projectSetDefaults					controllers.project.ProjectController.setDefaults(projectName)

# Import Table
POST    /project/:projectName/importTableFromCSV      controllers.project.TableController.importTableFromCSV(projectName)
POST    /project/:projectName/importTableFromJson      controllers.project.TableController.importTableFromJson(projectName)
POST    /project/:projectName/importTable      controllers.project.TableController.importTable(projectName)

# Save Table
POST    /project/:projectName/saveTable      controllers.project.ProjectController.saveTable(projectName)
GET    /project/:projectName/saveAllTables      controllers.project.ProjectController.saveAllTables(projectName)

# Delete Table
POST    /project/:projectName/deleteTable      controllers.project.TableController.deleteTable(projectName)

# Blocking
POST    /project/:projectName/block     controllers.project.ProjectController.block(projectName)
POST    /project/:projectName/blockMulti     controllers.project.ProjectController.blockMultiAttribute(projectName)

# Add Function
POST    /project/:name/addFunction     controllers.project.RuleController.addFunction(name)

# Import Functions
POST    /project/:name/importFunctions     controllers.project.RuleController.importFunctions(name)

# Save Function
POST    /project/:projectName/saveFunction      controllers.project.RuleController.saveFunction(projectName)
GET    /project/:projectName/saveAllFunctions      controllers.project.RuleController.saveAllFunctions(projectName)

# Delete Function
POST    /project/:projectName/deleteFunction      controllers.project.FunctionController.deleteFunction(projectName)

# Add Feature
POST    /project/:projectName/addFeature     controllers.project.FeatureController.addFeature(projectName)
POST	/project/:projectName/getRecommendedFunctions controllers.project.RuleController.getRecommendedFunctions(projectName)

# Import Features
POST    /project/:name/importFeatures     controllers.project.RuleController.importFeatures(name)

# Edit Feature
POST    /project/:name/editFeature     controllers.project.RuleController.editFeature(name)
GET     /featurestring/:projectName/:featureName	controllers.project.RuleController.getFeatureString(projectName, featureName)

# Edit Feature Using GUI
GET     /attributesforfeature/:projectName/:featureName	controllers.project.RuleController.getAttributesForFeature(projectName, featureName)
GET     /functionforfeature/:projectName/:featureName	controllers.project.RuleController.getFunctionForFeature(projectName, featureName)
POST    /project/:projectName/editFeatureGui     controllers.project.FeatureController.editFeatureUsingGui(projectName)

# Save Feature
POST    /project/:projectName/saveFeature      controllers.project.RuleController.saveFeature(projectName)
GET    /project/:projectName/saveAllFeatures      controllers.project.RuleController.saveAllFeatures(projectName)

# Delete Feature
POST    /project/:projectName/deleteFeature      controllers.project.FeatureController.deleteFeature(projectName)

# Auto Generate Features
POST    /project/:projectName/autoGenFeatures     controllers.project.FeatureController.autoGenerateFeatures(projectName)

# Compute Feature Costs
POST    /project/:projectName/computeFeatureCosts     controllers.project.FeatureController.computeFeatureCosts(projectName)

# Add Rule
POST    /project/:projectName/addRule     controllers.project.RuleController.addRule(projectName)
POST    /project/:projectName/addRules     controllers.project.RuleController.addRules(projectName, numRules : Int)

# Edit Rule
POST    /project/:name/editRule     controllers.project.RuleController.editRule(name)
GET     /rulestring/:projectName/:ruleName	controllers.project.RuleController.getRuleString(projectName, ruleName)

# Edit Rule using GUI
GET     /termsforrule/:projectName/:ruleName	controllers.project.RuleController.getTermsForRule(projectName, ruleName)
POST    /project/:projectName/editRuleUsingGui     controllers.project.RuleController.editRuleUsingGui(projectName)

# Import Rules
POST    /project/:name/importRules     controllers.project.RuleController.importRules(name)

# Save Rule
POST    /project/:projectName/saveRule      controllers.project.RuleController.saveRule(projectName)
GET    /project/:projectName/saveAllRules      controllers.project.RuleController.saveAllRules(projectName)

# Delete Rule
POST    /project/:projectName/deleteRule      controllers.project.RuleController.deleteRule(projectName)

# Learn rules using training data 
POST    /project/:projectName/learnRulesTrainingData     controllers.project.RuleController.learnRulesTrainingData(projectName)
POST    /project/:projectName/learnRulesTrainingData2     controllers.project.RuleController.learnRulesTrainingData2(projectName)
POST    /project/:projectName/learnRulesTrainingDataOptimized     controllers.project.RuleController.learnRulesTrainingDataOptimized(projectName)

# Learn rules using active learning
POST    /project/:projectName/learnRulesActiveLearning     controllers.project.RuleController.learnRulesActiveLearning(projectName)
POST    /project/:projectName/table1/:table1Name/table2/:table2Name/submitLabeledPairs     controllers.project.RuleController.submitLabeledPairs(projectName,table1Name,table2Name)
GET     /project/:projectName/showRulesForLearnedModel     controllers.project.RuleController.showRulesForLearnedModel(projectName, table1Name, table2Name, modelIndex : Int, option)
GET     /project/:projectName/resumeActiveLearning     controllers.project.RuleController.resumeActiveLearning(projectName, table1Name, table2Name)
POST    /project/:projectName/table1/:table1Name/table2/:table2Name/addActiveLearningRules     controllers.project.RuleController.addActiveLearningRules(projectName, table1Name, table2Name, modelIndex: Int, numRules : Int, option)
POST     /project/:projectName/evaluateActiveLearningRules     controllers.project.RuleController.evaluateActiveLearningRules(projectName, table1Name, table2Name, modelIndex : Int, option)

# Add Matcher
POST    /project/:projectName/addMatcher     controllers.project.MatcherController.addMatcher(projectName)

# Import Matcher
POST    /project/:name/importMatchers     controllers.project.RuleController.importMatchers(name)

# Edit Matcher
POST    /project/:name/editMatcher     controllers.project.RuleController.editMatcher(name)
GET     /matcherstring/:projectName/:matcherName	controllers.project.RuleController.getMatcherString(projectName, matcherName)

# Edit Matcher using GUI
GET     /allruleNames/:projectName	controllers.project.RuleController.getAllRuleNames(projectName)
GET     /rulesformatcher/:projectName/:matcherName	controllers.project.RuleController.getRulesForMatcher(projectName, matcherName)
POST    /project/:projectName/editMatcherUsingGui     controllers.project.MatcherController.editMatcherUsingGui(projectName)

# Save Matcher
POST    /project/:projectName/saveMatcher      controllers.project.RuleController.saveMatcher(projectName)
GET    /project/:projectName/saveAllMatchers      controllers.project.RuleController.saveAllMatchers(projectName)

# Delete Matcher
POST    /project/:projectName/deleteMatcher      controllers.project.MatcherController.deleteMatcher(projectName)

# Compare models using cross-validation
POST    /project/:projectName/compareModels     controllers.project.MatcherController.compareModelsUsingCV(projectName)

# Matching
POST    /project/:projectName/doMatch     	controllers.project.RuleController.doMatch(projectName)
POST    /project/:projectName/doMatchDebug     	controllers.project.RuleController.doMatchDebug(projectName)

# Evaluate
POST    /project/:name/evaluateGold     	controllers.project.EvaluationController.evaluateWithGold(name)
POST    /project/:name/evaluateLabeledData     	controllers.project.EvaluationController.evaluateWithLabeledData(name)